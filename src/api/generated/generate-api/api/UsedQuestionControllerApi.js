/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UsedQuestionRequestViewUsedQuestion from '../model/UsedQuestionRequestViewUsedQuestion';
import UsedQuestionViewUsedQuestion from '../model/UsedQuestionViewUsedQuestion';
import UsedQuestionViewUsedQuestionDoQuiz from '../model/UsedQuestionViewUsedQuestionDoQuiz';

/**
* UsedQuestionController service.
* @module api/UsedQuestionControllerApi
* @version v1
*/
export default class UsedQuestionControllerApi {

    /**
    * Constructs a new UsedQuestionControllerApi. 
    * @alias module:api/UsedQuestionControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findAllUsedQuestion operation.
     * @callback module:api/UsedQuestionControllerApi~findAllUsedQuestionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsedQuestionViewUsedQuestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UsedQuestionControllerApi~findAllUsedQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsedQuestionViewUsedQuestion>}
     */
    findAllUsedQuestion(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsedQuestionViewUsedQuestion];
      return this.apiClient.callApi(
        '/api/v1/used-question/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllUsedQuestionByDoQuizId operation.
     * @callback module:api/UsedQuestionControllerApi~findAllUsedQuestionByDoQuizIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsedQuestionViewUsedQuestionDoQuiz>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/UsedQuestionControllerApi~findAllUsedQuestionByDoQuizIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsedQuestionViewUsedQuestionDoQuiz>}
     */
    findAllUsedQuestionByDoQuizId(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling findAllUsedQuestionByDoQuizId");
      }

      let pathParams = {
      };
      let queryParams = {
        'quiz_id': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsedQuestionViewUsedQuestionDoQuiz];
      return this.apiClient.callApi(
        '/api/v1/used-question/by-do-quiz', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllUsedQuestionByQuizId operation.
     * @callback module:api/UsedQuestionControllerApi~findAllUsedQuestionByQuizIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsedQuestionViewUsedQuestion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} quizId 
     * @param {module:api/UsedQuestionControllerApi~findAllUsedQuestionByQuizIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsedQuestionViewUsedQuestion>}
     */
    findAllUsedQuestionByQuizId(quizId, callback) {
      let postBody = null;
      // verify the required parameter 'quizId' is set
      if (quizId === undefined || quizId === null) {
        throw new Error("Missing the required parameter 'quizId' when calling findAllUsedQuestionByQuizId");
      }

      let pathParams = {
      };
      let queryParams = {
        'quiz_id': quizId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsedQuestionViewUsedQuestion];
      return this.apiClient.callApi(
        '/api/v1/used-question/by-quiz', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsedQuestionById operation.
     * @callback module:api/UsedQuestionControllerApi~getUsedQuestionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsedQuestionViewUsedQuestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} questionId 
     * @param {module:api/UsedQuestionControllerApi~getUsedQuestionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsedQuestionViewUsedQuestion}
     */
    getUsedQuestionById(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getUsedQuestionById");
      }

      let pathParams = {
      };
      let queryParams = {
        'question_id': questionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UsedQuestionViewUsedQuestion;
      return this.apiClient.callApi(
        '/api/v1/used-question/by-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveUsedQuestion operation.
     * @callback module:api/UsedQuestionControllerApi~saveUsedQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsedQuestionViewUsedQuestion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UsedQuestionRequestViewUsedQuestion} usedQuestionRequestViewUsedQuestion 
     * @param {module:api/UsedQuestionControllerApi~saveUsedQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsedQuestionViewUsedQuestion}
     */
    saveUsedQuestion(usedQuestionRequestViewUsedQuestion, callback) {
      let postBody = usedQuestionRequestViewUsedQuestion;
      // verify the required parameter 'usedQuestionRequestViewUsedQuestion' is set
      if (usedQuestionRequestViewUsedQuestion === undefined || usedQuestionRequestViewUsedQuestion === null) {
        throw new Error("Missing the required parameter 'usedQuestionRequestViewUsedQuestion' when calling saveUsedQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UsedQuestionViewUsedQuestion;
      return this.apiClient.callApi(
        '/api/v1/used-question/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
