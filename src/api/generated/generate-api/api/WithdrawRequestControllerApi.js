/**
 * FPT SE OnLearn management API
 * FPT OnLearn Management API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptWithdrawRequestWithdrawRequestView from '../model/AcceptWithdrawRequestWithdrawRequestView';
import WithdrawalRequestWithdrawRequestView from '../model/WithdrawalRequestWithdrawRequestView';

/**
* WithdrawRequestController service.
* @module api/WithdrawRequestControllerApi
* @version v1
*/
export default class WithdrawRequestControllerApi {

    /**
    * Constructs a new WithdrawRequestControllerApi. 
    * @alias module:api/WithdrawRequestControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptWithdrawRequest operation.
     * @callback module:api/WithdrawRequestControllerApi~acceptWithdrawRequestCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AcceptWithdrawRequestWithdrawRequestView} acceptWithdrawRequestWithdrawRequestView 
     * @param {module:api/WithdrawRequestControllerApi~acceptWithdrawRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acceptWithdrawRequest(acceptWithdrawRequestWithdrawRequestView, callback) {
      let postBody = acceptWithdrawRequestWithdrawRequestView;
      // verify the required parameter 'acceptWithdrawRequestWithdrawRequestView' is set
      if (acceptWithdrawRequestWithdrawRequestView === undefined || acceptWithdrawRequestWithdrawRequestView === null) {
        throw new Error("Missing the required parameter 'acceptWithdrawRequestWithdrawRequestView' when calling acceptWithdrawRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/withdraw-request/accept-withdraw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllById operation.
     * @callback module:api/WithdrawRequestControllerApi~findAllByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WithdrawalRequestWithdrawRequestView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/WithdrawRequestControllerApi~findAllByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WithdrawalRequestWithdrawRequestView}
     */
    findAllById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findAllById");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = WithdrawalRequestWithdrawRequestView;
      return this.apiClient.callApi(
        '/api/v1/withdraw-request/by-id', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllByTeacherId operation.
     * @callback module:api/WithdrawRequestControllerApi~findAllByTeacherIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WithdrawalRequestWithdrawRequestView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} teacherId 
     * @param {module:api/WithdrawRequestControllerApi~findAllByTeacherIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WithdrawalRequestWithdrawRequestView>}
     */
    findAllByTeacherId(teacherId, callback) {
      let postBody = null;
      // verify the required parameter 'teacherId' is set
      if (teacherId === undefined || teacherId === null) {
        throw new Error("Missing the required parameter 'teacherId' when calling findAllByTeacherId");
      }

      let pathParams = {
      };
      let queryParams = {
        'teacher_id': teacherId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WithdrawalRequestWithdrawRequestView];
      return this.apiClient.callApi(
        '/api/v1/withdraw-request/by-teacher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionForWithdraw operation.
     * @callback module:api/WithdrawRequestControllerApi~getTransactionForWithdrawCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} teacherId 
     * @param {module:api/WithdrawRequestControllerApi~getTransactionForWithdrawCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getTransactionForWithdraw(teacherId, callback) {
      let postBody = null;
      // verify the required parameter 'teacherId' is set
      if (teacherId === undefined || teacherId === null) {
        throw new Error("Missing the required parameter 'teacherId' when calling getTransactionForWithdraw");
      }

      let pathParams = {
      };
      let queryParams = {
        'teacher_id': teacherId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/v1/withdraw-request/transaction-teacher', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
